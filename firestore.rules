rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      return isSignedIn() && group.data.members.hasAny([request.auth.uid]);
    }
    
    function isChatParticipant(chatId) {
      return isSignedIn() && 
             (chatId.matches(request.auth.uid + '_.*') || 
              chatId.matches('.*_' + request.auth.uid));
    }

    // Default rule - deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if true; // Anyone can read user profiles
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        // User can update their own profile
        request.auth.uid == userId ||
        // Or if adding a group that includes the current user as a member
        (request.resource.data.groups != null && 
         resource.data.groups != request.resource.data.groups && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['groups']))
      );
      allow delete: if isOwner(userId);
    }
    
    // Individual chats
    match /chats/{chatId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isChatParticipant(chatId);
      
      // Chat messages
      match /messages/{messageId} {
        allow read, write: if isChatParticipant(chatId);
      }
    }
    
    // Group chats
    match /groups/{groupId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn();
      allow update, delete: if isSignedIn() && (
        resource.data.createdBy == request.auth.uid || 
        resource.data.members.hasAny([request.auth.uid])
      );
      
      // Group messages
      match /messages/{messageId} {
        allow read: if isSignedIn() && (
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid])
        );
        
        allow create: if isSignedIn() && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]) &&
          request.resource.data.sender == request.auth.uid;
        
        allow update, delete: if isSignedIn() && 
          resource.data.sender == request.auth.uid;
      }
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                   && request.resource.size < 5 * 1024 * 1024  // 5MB limit
                   && (request.resource.contentType.matches('image/.*') || 
                       request.resource.contentType.matches('video/.*'));
    }
  }
}